const fs = require('fs')
const Router = require('koa-router')
const { createBundleRenderer } = require('vue-server-renderer')
const Koa = require('koa')
const resolve = file => require('path').resolve(__dirname, file)
const app = new Koa()
const router = new Router()
// const SSRRender = require('./ssr')
const isProd = process.env.NODE_ENV === 'production'
const middleware = require('./middleware')

/* 中间件 */
middleware(app)


/* --- SSR --- */
let templatePath // 渲染的html模板
let renderer // createBundleRenderer() 创建的实例
let readyPromise // 开发环境，等待服务启动的异步标识
let devFs // 开发环境，虚拟内存系统

/* 通用-用于创建 vue-server-renderer/createBundleRenderer 的实例 */
const createRenderer = (serverBundle, options) => {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(serverBundle, Object.assign(options, {
    basedir: resolve('../dist'),
    runInNewContext: false,
  }))
}


/* 使用 renderer 生成页面string */
const renderHandler = async (ctx) => {
  return new Promise((resolveHtml, reject) => {
    ctx.tag = `<div>SSR插入: ${ctx.request.header.host}${ctx.request.url}</div>`
    // 使用 server-render 生成页面
    renderer.renderToString(ctx, (err, html) => {
      if (err) {
        reject(err)
        return
      }
      resolveHtml(html)
    })
  })
}

/* ssr渲染错误处理 */
const errorHandler = async (err, ctx) => {
  // renderCSRHtml(ctx, devFs)
  const code = err.code
  if (code === 301 || code === 302) {
    if (err.url && err.url.startsWith('//')) {
      ctx.status = 404
      ctx.type = 'html'
      ctx.body = fs.readFileSync(resolve('../public/404.html'), 'utf-8')
      return
    }
    ctx.redirect(err.url)
  } else if (code === 404) {
    ctx.status = 404
    ctx.type = 'html'
    ctx.body = fs.readFileSync(resolve('../public/404.html'), 'utf-8')
  } else {
    // 渲染异常，返回客户端spa模板
    ctx.status = 500
    ctx.body = 'Internal Server Error'
    renderCSRHtml(ctx, devFs)
  }
  return
}

/* 输出spa页面模板（区分开发/生产） */
const renderCSRHtml = (ctx, devFs) => {
  ctx.type = 'html'
  if (isProd) {
    ctx.body = fs.readFileSync(resolve('../dist/index.spa.html'), 'utf-8')
  } else {
    const spaHtmlBuffer = devFs.readFileSync(resolve('../dist/index.spa.html'))
    ctx.body = spaHtmlBuffer
    // ctx.body = fs.readFileSync(resolve('../public/index.spa.html'), 'utf-8')
  }
}

if (isProd) {
  templatePath = resolve('.../public/index.ssr.html')
  const template = fs.readFileSync(templatePath, 'utf-8')
  const serverBundle = require(resolve('../dist/vue-ssr-server-bundle.json'))
  const clientManifest = require(resolve('../dist/vue-ssr-client-manifest.json'))
  // In production: create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  renderer = createRenderer(serverBundle, {
    template,
    clientManifest,
    // inject: false
  })
/* 开发 */
} else {
  templatePath = resolve('../public/index.ssr.html')
  const setupDevServer = require(resolve('../build/setup-dev-server'))(
    app,
    templatePath,
    (bundle, options) => {
      // options.inject = false
      renderer = createRenderer(bundle, options)
    }
  )
  readyPromise = setupDevServer.readyPromise
  devFs = setupDevServer.fs
}

router.get('*', async (ctx, next) => {
  try {
    if (!isProd) {
      await readyPromise
    }
    const html = await renderHandler(ctx)
    ctx.type = 'html'
    ctx.body = html
  } catch (err) {
    // console.log('render-error:', err)
    errorHandler(err, ctx)
  }
})

// 加载路由中间件
app
  .use(router.routes())
  .use(router.allowedMethods())

app.listen(3000, '127.0.0.1', () => {
  console.log('server started')
})