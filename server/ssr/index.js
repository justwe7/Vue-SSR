
const fs = require('fs')
const path = require('path')
const resolve = file => path.resolve(__dirname, file)
const Vue = require('vue')
const Router = require('koa-router')
// const Router = require('@koa/router')
const { createBundleRenderer } = require('vue-server-renderer')
// const renderer = require('vue-server-renderer').createRenderer()
const isProd = process.env.NODE_ENV === 'production'
const router = new Router()


const serverBundle = resolve('../../dist/vue-ssr-server-bundle.json')
const clientManifest = resolve('../../dist/vue-ssr-client-manifest.json')

let renderer
let readyPromise

/* 用于开发环境 */
const createRenderer = (serverBundle, options) => {
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return createBundleRenderer(serverBundle, Object.assign(options, {
    basedir: resolve('../../dist'),
    runInNewContext: false, // 推荐
    template: fs.readFileSync('./public/index.ssr.html', 'utf-8'), // 与require不同，fs模块取运行指令时目录的pwd
    clientManifest // （可选）客户端构建 manifest
  }))
}

/* 生产环境 */
renderer = createBundleRenderer(serverBundle, {
  runInNewContext: false, // 推荐
  template: fs.readFileSync('./public/index.ssr.html', 'utf-8'), // 与require不同，fs模块取运行指令时目录的pwd
  clientManifest: require(clientManifest) // （可选）客户端构建 manifest (要使用require)
})

/* 输出页面string */
const render = async (ctx) => {
  return new Promise((resolve, reject) => {
    ctx.tag = `<div>SSR上下文插入的标签</div>`

    // 使用 server-render 生成页面
    renderer.renderToString(ctx, (err, html) => {
      console.log(html)
      if (err) {
        reject(err)
        return
      }
      resolve(html)
    })
  })
}
const templatePath = resolve('../public/index.ssr.html')
module.exports = app => {
  router.get('*', async (ctx, next) => {

    
    // In production: create server renderer using template and built server bundle.
    // The server bundle is generated by vue-ssr-webpack-plugin.
    // renderer = createRenderer(serverBundle, {
    //   template: fs.readFileSync('./public/index.ssr.html', 'utf-8'),
    //   // clientManifest,
    //   // runInNewContext: false
    // })

    try {
      const html = await render(ctx)
      ctx.type = 'html'
      ctx.body = html
    } catch (err) {
      ctx.status = 500
      ctx.body = 'Internal Server Error'
    }
  })

  app
    .use(router.routes())
    .use(router.allowedMethods())
}
