const Webpack = require('webpack')
const fs = require('fs')
const path = require('path')
const MFS = require('memory-fs') // 从内存读取文件
const chokidar = require('chokidar')
const clientConfig = require('./webpack.client')
const serverConfig = require('./webpack.server')

// const mfs = new MFS()
// mfs.mkdirpSync("/Users/debugger/bugfolder/www/github/Vue-SSR/dist")
// console.log(path.join(clientConfig.output.path, 'vue-ssr-server-bundle.json'))
// console.log(mfs.readFileSync(path.join(clientConfig.output.path, 'vue-ssr-server-bundle.json')))
// console.log(mfs.readFileSync('/Users/debugger/bugfolder/www/github/Vue-SSR/dist/vue-ssr-server-bundle.json'))
// return false
// console.log(fs.readFileSync(path.join(clientConfig.output.path, 'vue-ssr-server-bundle.json')))
// readFile(mfs, 'vue-ssr-server-bundle.json')

// const readFile = (fs, file) => {
const readFile = (fss, file) => {
  // console.log(111, clientConfig.output.path)
  try {
    console.log(fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8'), 11333)
    // console.log(222, fss.readFileSync(path.join(clientConfig.output.path, file), 'utf-8'))
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (e) {
    console.log(333, e)
  }
}

module.exports = function setupDevServer (app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  let ready
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // read template from disk and watch
  console.log(111, templatePath)
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.bundle]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new Webpack.HotModuleReplacementPlugin(),
    new Webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = Webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    // noInfo: true
  })
  app.use(devMiddleware)
  clientCompiler.hooks.done.tap('done', stats => {
    stats = stats.toJson()
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })
  // clientCompiler.plugin('done', stats => {
  //   stats = stats.toJson()
  //   stats.errors.forEach(err => console.error(err))
  //   stats.warnings.forEach(err => console.warn(err))
  //   if (stats.errors.length) return
  //   clientManifest = JSON.parse(readFile(
  //     devMiddleware.fileSystem,
  //     'vue-ssr-client-manifest.json'
  //   ))
  //   update()
  // })

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = Webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}